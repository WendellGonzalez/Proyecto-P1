/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista.PACIENTES;

import DAO.CitaDAO;
import DAOImpl.CitaDAOImpl;
import DAO.EspecialidadDAO;
import DAOImpl.EspecialidadDAOImpl;
import DAO.HorarioDAO;
import DAOImpl.HorarioDAOImpl;
import DAO.MedicoDAO;
import DAOImpl.MedicoDAOImpl;
import DAO.PacienteDAO;
import DAOImpl.PacienteDAOImpl;
import Model.Cita;
import Model.Especialidad;
import Model.Medico;
import Model.Paciente;
import Vista.LoginORSignIn;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

/**
 *
 * @author wendellgonzalez
 */
public class AgendarCitasPacientes extends javax.swing.JFrame {

    private int medicoSeleccionadoId = -1;
    private HorarioDAO horarioDAO = new HorarioDAOImpl();
    private Paciente pacienteLogueado;
    
    

    private List<Especialidad> especialidades;

    public AgendarCitasPacientes(Paciente paciente) {
        this.pacienteLogueado = paciente;
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("NOMBRE DEL PACIENTE: " + paciente.getNombre());
        
        DefaultTableModel vaciarTabla = (DefaultTableModel) tablaMedicos.getModel();
        vaciarTabla.setRowCount(0);

        comboEspecialidades.removeAllItems();
        comboEspecialidades.addItem("SELECCIONA");

        comboHoras.removeAllItems();

        EspecialidadDAO dao = new EspecialidadDAOImpl();
        especialidades = dao.obtenerTodas();

        for (Especialidad esp : especialidades) {
            comboEspecialidades.addItem(esp.getNombre());
        }

        comboEspecialidades.setSelectedIndex(0);

        comboEspecialidades.addActionListener(e -> {
            int index = comboEspecialidades.getSelectedIndex();

            if (index > 0 && index - 1 < especialidades.size()) {
                Especialidad seleccionada = especialidades.get(index - 1);
                cargarMedicosPorEspecialidad(seleccionada.getIdEspecialidad());
            } else {

                DefaultTableModel model = (DefaultTableModel) tablaMedicos.getModel();
                model.setRowCount(0);
            }
        });
        
        fechaDate.setEnabled(false);
        comboHoras.setEnabled(false);
        txtMotivo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        comboEspecialidades = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        fechaDate = new com.toedter.calendar.JDateChooser();
        comboHoras = new javax.swing.JComboBox<>();
        btnRealizarCita = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMotivo = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaMedicos = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JTextField();
        txtTotalEspecialidades = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SELECCIONA ESPECIALIDAD", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 24), new java.awt.Color(0, 102, 102))); // NOI18N

        comboEspecialidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(comboEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(comboEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SELECCIONA FECHA/HORA", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 24), new java.awt.Color(0, 102, 102))); // NOI18N

        fechaDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaDatePropertyChange(evt);
            }
        });

        comboHoras.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnRealizarCita.setBackground(new java.awt.Color(0, 51, 51));
        btnRealizarCita.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        btnRealizarCita.setForeground(new java.awt.Color(255, 255, 255));
        btnRealizarCita.setText("REALIZAR CITA");
        btnRealizarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarCitaActionPerformed(evt);
            }
        });

        txtMotivo.setColumns(20);
        txtMotivo.setRows(5);
        txtMotivo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MOTIVO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 14), new java.awt.Color(0, 102, 102))); // NOI18N
        jScrollPane1.setViewportView(txtMotivo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(fechaDate, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnRealizarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaDate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRealizarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));

        tablaMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "TELEFONO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMedicosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaMedicos);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(0, 51, 51));

        txtBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BUSCAR DOCTOR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 14), new java.awt.Color(0, 102, 102))); // NOI18N

        txtTotalEspecialidades.setEditable(false);
        txtTotalEspecialidades.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        txtTotalEspecialidades.setForeground(new java.awt.Color(0, 102, 102));
        txtTotalEspecialidades.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTotalEspecialidades.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TOTAL DOCTORES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 14), new java.awt.Color(0, 102, 102))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotalEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalEspecialidades, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuBar1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "-", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 2, 13), new java.awt.Color(204, 204, 204))); // NOI18N
        jMenuBar1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N

        jMenu1.setText("MENÚ");

        jMenu1.setFont(new java.awt.Font("Helvetica Neue", java.awt.Font.BOLD, 15));

        JMenuItem itemVolver = new JMenuItem("Volver al módulo anterior");
        JMenuItem itemSalir = new JMenuItem("Salir del sistema");
        JMenuItem itemCerrarSesion = new JMenuItem("Cerrar sesion");

        itemVolver.addActionListener(e -> {
            this.dispose();
            new PanelPacientes(this.pacienteLogueado).setVisible(true);
        });

        itemCerrarSesion.addActionListener(e -> {
            this.dispose();
            new LoginORSignIn().setVisible(true);
        });

        itemSalir.addActionListener(e -> {
            int resp = JOptionPane.showConfirmDialog(this, "¿Deseas salir del sistema?", "Confirmar Salida", JOptionPane.YES_NO_OPTION);
            if(resp == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        });

        jMenu1.add(itemCerrarSesion);
        jMenu1.add(itemVolver);
        jMenu1.addSeparator();
        jMenu1.add(itemSalir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMedicosMouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = tablaMedicos.getSelectedRow();
        if (filaSeleccionada >= 0) {
            medicoSeleccionadoId = (int) tablaMedicos.getValueAt(filaSeleccionada, 0);

            fechaDate.setDate(null);
            comboHoras.removeAllItems();

            fechaDate.setEnabled(true);
            comboHoras.setEnabled(false);
            txtMotivo.setEnabled(true);
            
        }
    }//GEN-LAST:event_tablaMedicosMouseClicked

    private void fechaDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaDatePropertyChange
        // TODO add your handling code here:
        
        if("date".equals(evt.getPropertyName())) {
            comboHoras.setEnabled(true);
            cargarHorasDisponibles();
        }

    }//GEN-LAST:event_fechaDatePropertyChange

    private void btnRealizarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarCitaActionPerformed
        // TODO add your handling code here:
        realizarCita();
    }//GEN-LAST:event_btnRealizarCitaActionPerformed

    private void realizarCita() {
        int fila = tablaMedicos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un medico.");
            return;
        }

        int idMedico = (int) tablaMedicos.getValueAt(fila, 0);

        Date selectedDate = fechaDate.getDate();
        if (selectedDate == null) {
            JOptionPane.showMessageDialog(this, "Selecciona una fecha.");
            return;
        }

        String horaSeleccionadaStr = (String) comboHoras.getSelectedItem();
        if (horaSeleccionadaStr == null || horaSeleccionadaStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecciona una hora disponible", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String motivo = txtMotivo.getText();
        if(motivo.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, escribe el motivo de la cita.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalTime horaSeleccionada = LocalTime.parse(horaSeleccionadaStr);

        int idUsuario = pacienteLogueado.getIdUsuario();
        PacienteDAO pacienteDAO = new PacienteDAOImpl();
        int idPaciente = pacienteDAO.obtenderIdPacientePorIdUsuario(idUsuario);
        
        if (idPaciente == -1) {
            JOptionPane.showMessageDialog(this, "Error: No se pudo obtener el ID del paciente.", "Error de Usuario", JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalDate fechaSeleccionada = selectedDate.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();

        Cita cita = new Cita();
        cita.setIdPaciente(idPaciente);
        cita.setIdMedico(idMedico);
        cita.setFecha(fechaSeleccionada);
        cita.setHora(horaSeleccionada);
        cita.setMotivo(motivo);
        cita.setEstado(Cita.Estado.PENDIENTE);

        CitaDAO citaDAO = new CitaDAOImpl();
        boolean exito = citaDAO.registrarCita(cita);

        if (exito) {
            JOptionPane.showMessageDialog(this, "Cita registrada exitosamente");
            new PanelPacientes(this.pacienteLogueado).setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Error al registrar la cita");
        }
    }
    
    // metodo para cargar al comboBox de horas disponibles las horas disponubles del medico
    private void cargarHorasDisponibles() {
       
        Date selectedDate = fechaDate.getDate();
        
        if(medicoSeleccionadoId != -1 && selectedDate != null) {
            LocalDate fechaSeleccionada = selectedDate.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            
            List<String> horas = horarioDAO.obtenerHorasDisponibles(medicoSeleccionadoId, fechaSeleccionada);
            
            comboHoras.removeAllItems();
            if(horas.isEmpty()) {
                comboHoras.addItem("No hay horas disponibles");
            } else {
                for (String hora : horas) {
                    comboHoras.addItem(hora);
                }
            }
        } else {
            comboHoras.removeAllItems();
        }
    }
    
    private void cargarMedicosPorEspecialidad(int idEspecialidad) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.addColumn("ID");
        model.addColumn("NOMBRE");
        model.addColumn("TELEFONO");

        MedicoDAO medicoDAO = new MedicoDAOImpl();
        List<Medico> medicos = medicoDAO.obtenerMedicosPorEspecialidad(idEspecialidad);

        for (Medico medico : medicos) {
            model.addRow(new Object[]{
                medico.getIdMedico(),
                medico.getNombre(),
                medico.getTelefono()
            });
        }

        tablaMedicos.setModel(model);
        txtTotalEspecialidades.setText(String.valueOf(medicos.size()));

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRealizarCita;
    private javax.swing.JComboBox<String> comboEspecialidades;
    private javax.swing.JComboBox<String> comboHoras;
    private com.toedter.calendar.JDateChooser fechaDate;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaMedicos;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextArea txtMotivo;
    private javax.swing.JTextField txtTotalEspecialidades;
    // End of variables declaration//GEN-END:variables
}
