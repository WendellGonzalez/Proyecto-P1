/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista.MEDICOS;

import DAO.CitaDAO;
import DAOImpl.CitaDAOImpl;
import DAO.HistorialMedicoDAO;
import DAOImpl.HistorialMedicoDAOImpl;
import DAO.UsuarioDAO;
import DAOImpl.UsuarioDAOimpl;
import Model.HistorialMedico;
import Model.Medico;
import Model.Usuario;
import Vista.LOGIN;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.Font;

/**
 *
 * @author wendellgonzalez
 */
public class GestionHistorialPacientes extends javax.swing.JFrame {

    private List<Usuario> listaUsuario = new ArrayList<>();
    DefaultTableModel mt = new DefaultTableModel();
    private Medico medicoLogueado;

    private List<Usuario> listaPacientes = new ArrayList<>();
    private List<HistorialMedico> listaHistorial = new ArrayList<>();

    /**
     * Creates new form GestionPacientesMedico
     */
    public GestionHistorialPacientes(Medico medico) {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        this.medicoLogueado = medico;
        cargarTabla("");
        contarPacientes();
        setTitle("Dr(a) " + medicoLogueado.getNombre());

        activiarBotonesEdicion(false);
        habilitarCampos(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtTipoSangre = new javax.swing.JTextField();
        txtAlergias = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        txtEnfermedadesCronicas = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaHistorial = new javax.swing.JTable();
        txtBuscar = new javax.swing.JTextField();
        txtTotalPacientes = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PACIENTES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 18))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INGRESE LA SIGUIENTE INFORMACION", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        txtTipoSangre.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE SANGRE"));

        txtAlergias.setToolTipText("");
        txtAlergias.setBorder(javax.swing.BorderFactory.createTitledBorder("ALERGIAS"));

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMGS/cancel.png"))); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMGS/edite.png"))); // NOI18N
        btnEditar.setText(" EDITAR");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMGS/update.png"))); // NOI18N
        btnActualizar.setText(" ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        txtEnfermedadesCronicas.setBorder(javax.swing.BorderFactory.createTitledBorder("ENFERMEDADES CRONICAS"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtTipoSangre, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(txtAlergias, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtEnfermedadesCronicas)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTipoSangre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAlergias, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtEnfermedadesCronicas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LISTADO DE PACIENTES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        tablaHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre Completo", "Tipo de Usuario", "Direcci√≥n", "Email", "Telefono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaHistorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaHistorialMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaHistorial);

        txtBuscar.setToolTipText("Buscar usuarios por nombres o apellidos");
        txtBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar"));
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        txtTotalPacientes.setEditable(false);
        txtTotalPacientes.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        txtTotalPacientes.setForeground(new java.awt.Color(0, 102, 102));
        txtTotalPacientes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTotalPacientes.setBorder(javax.swing.BorderFactory.createTitledBorder("Total de Pacientes"));
        txtTotalPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalPacientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(txtBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jMenuBar1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "-", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 2, 13), new java.awt.Color(204, 204, 204))); // NOI18N
        jMenuBar1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N

        jMenu1.setText("MEN√ö");

        JMenuItem itemCerrarSesion = new JMenuItem("Cerrar sesi√≥n");
        JMenuItem itemVolver = new JMenuItem("Volver al m√≥dulo anterior");
        JMenuItem itemSalir = new JMenuItem("Salir del sistema");

        // Agregarlos al menu
        jMenu1.add(itemCerrarSesion);
        jMenu1.add(itemVolver);
        jMenu1.addSeparator();
        jMenu1.add(itemSalir);

        itemCerrarSesion.addActionListener(e -> {
            this.dispose();
            new LOGIN().setVisible(true);
        });

        itemVolver.addActionListener(e -> {
            this.dispose();
            new PanelMedicos(this.medicoLogueado).setVisible(true);
        });

        itemSalir.addActionListener(e -> {
            int resp = JOptionPane.showConfirmDialog(this, "¬øDeseas salir del sistema?", "Confirmar salida", JOptionPane.YES_NO_OPTION);
            if (resp == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        });

        //Dise√±o del menu
        jMenu1.setFont(new Font("Helvetica Neue", Font.BOLD, 13));

        // Agregar menu al menu par
        jMenuBar1.add(jMenu1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        LimpiarCampos();
        habilitarCampos(false);
        activiarBotonesEdicion(false);
        tablaHistorial.clearSelection();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:

        habilitarCampos(true);
        btnActualizar.setEnabled(true);
        btnCancelar.setEnabled(true);
        btnEditar.setEnabled(false);

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizarHistorial();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void tablaHistorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaHistorialMouseClicked
        // TODO add your handling code here:
        int fila = tablaHistorial.getSelectedRow();
        if (fila >= 0) {

            int idPaciente = (int) tablaHistorial.getValueAt(fila, 0);

            HistorialMedicoDAO historialDao = new HistorialMedicoDAOImpl();

            HistorialMedico historial = historialDao.buscarPorPaciente(idPaciente);

            if (historial != null) {
                txtTipoSangre.setText(historial.getTipoSangre());
                txtAlergias.setText(historial.getAlergias());
                txtEnfermedadesCronicas.setText(historial.getEnfermedadesCronicas());

            } else {
                JOptionPane.showMessageDialog(this, "El paciente seleccionado no tiene historial medico");
                LimpiarCampos();
            }

            activiarBotonesEdicion(false);
            btnEditar.setEnabled(true);
            habilitarCampos(false);

        }

    }//GEN-LAST:event_tablaHistorialMouseClicked

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
        cargarTabla(txtBuscar.getText());
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        String texto = txtBuscar.getText();
        cargarTabla(texto);
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void txtTotalPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalPacientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalPacientesActionPerformed

    //metodo para actualizar
    private void actualizarHistorial() {
        int fila = tablaHistorial.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(this, "Seleccione un paciente para actualizar datos.");
            return;
        }

        int idPaciente = (int) tablaHistorial.getValueAt(fila, 0);

        HistorialMedicoDAO historialDAO = new HistorialMedicoDAOImpl();

        HistorialMedico historialExistente = historialDAO.buscarPorPaciente(idPaciente);

        if (historialExistente != null) {
            historialExistente.setTipoSangre(txtTipoSangre.getText());
            historialExistente.setAlergias(txtAlergias.getText());
            historialExistente.setEnfermedadesCronicas(txtEnfermedadesCronicas.getText());

            if (historialDAO.actualizar(historialExistente)) {
                JOptionPane.showMessageDialog(this, "Datos actualizados exitosamente");
                cargarTabla("");
                LimpiarCampos();
                activiarBotonesEdicion(false);
                habilitarCampos(false);
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar datos");
            }
        }
    }

    //metodo para cargar tabla
    private void cargarTabla(String filtro) {
        CitaDAO citaDAO = new CitaDAOImpl();

        List<Usuario> pacientesDelMedico = citaDAO.getPacientesPorMedico(this.medicoLogueado.getIdMedico());
        this.listaPacientes = pacientesDelMedico;

        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        modelo.setRowCount(0);

        String[] columnNames = {"ID", "Nombre Completo", "Email", "Telefono", "Direccion"};
        modelo.setColumnIdentifiers(columnNames);

        if (filtro != null && !filtro.trim().isEmpty()) {
            for (Usuario u : listaPacientes) {
                if (u.getNombre().toLowerCase().contains(filtro.toLowerCase())) {
                    Object[] fila = {
                        u.getIdUsuario(),
                        u.getNombre(),
                        u.getEmail(),
                        u.getTelefono(),
                        u.getDireccion()
                    };
                    modelo.addRow(fila);
                }
            }
        } else {
            for (Usuario u : listaPacientes) {
                Object[] fila = {
                    u.getIdUsuario(),
                    u.getNombre(),
                    u.getEmail(),
                    u.getTelefono(),
                    u.getDireccion()
                };
                modelo.addRow(fila);
            }
        }

        tablaHistorial.setModel(modelo);

        try {
            tablaHistorial.getColumnModel().getColumn(0).setMinWidth(0);
            tablaHistorial.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaHistorial.getColumnModel().getColumn(0).setWidth(0);
        } catch (Exception e) {
            System.out.println("Error al ocultar columna ID: " + e.getMessage());
        }
    }

    //Metodo para activar o no los botones  
    private void activiarBotonesEdicion(boolean estado) {
        btnEditar.setEnabled(estado);
        btnActualizar.setEnabled(estado);
        btnCancelar.setEnabled(estado);
    }

    // Metodo para habilitar o no los campos
    private void habilitarCampos(boolean estado) {
        txtTipoSangre.setEnabled(estado);
        txtAlergias.setEnabled(estado);
        txtEnfermedadesCronicas.setEnabled(estado);
    }

    // Metodo para limpiar los campos   
    private void LimpiarCampos() {
        txtTipoSangre.setText("");
        txtAlergias.setText("");
        txtEnfermedadesCronicas.setText("");
    }

    // Metodo para contar los pacientes
    private void contarPacientes() {
        UsuarioDAO dao = new UsuarioDAOimpl();
        int totalPacientes = dao.contarPacientesPorMedico(this.medicoLogueado.getIdMedico());
        txtTotalPacientes.setText(String.valueOf(totalPacientes));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaHistorial;
    private javax.swing.JTextField txtAlergias;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtEnfermedadesCronicas;
    private javax.swing.JTextField txtTipoSangre;
    private javax.swing.JTextField txtTotalPacientes;
    // End of variables declaration//GEN-END:variables
}
